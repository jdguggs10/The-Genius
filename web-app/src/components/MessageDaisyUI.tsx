import { useState } from 'react';
import ReactMarkdown from 'react-markdown';
import { motion, useReducedMotion } from 'framer-motion';
import type { MessageType } from '../types';
import { ClipboardDocumentIcon, PencilIcon, TrashIcon } from '@heroicons/react/24/outline';
import { UserIcon, SparklesIcon } from '@heroicons/react/24/solid';
// @ts-ignore: react-hot-toast has no type declarations
import toast from 'react-hot-toast';

type MessageProps = {
  message: MessageType;
};

export default function MessageDaisyUI({ message }: MessageProps) {
  const isUser = message.role === 'user';
  const ariaLabel = `${isUser ? 'User said' : 'AI replied'}: ${message.content.substring(0, 50)}${message.content.length > 50 ? '...' : ''}`;
  const [showActions, setShowActions] = useState(false);
  const shouldReduceMotion = useReducedMotion();

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(message.content);
      toast.success('Copied to clipboard!', { duration: 1500, id: `copy-${message.id}` });
    } catch (err) {
      console.error('Failed to copy message: ', err);
      toast.error('Failed to copy.', { duration: 1500, id: `copy-err-${message.id}` });
    }
    setShowActions(false);
  };

  return (
    <motion.div
      layout
      initial={{ opacity: 0, y: shouldReduceMotion ? 0 : 10 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0 }}
      transition={{ duration: shouldReduceMotion ? 0.1 : 0.3 }}
      className={`chat ${isUser ? 'chat-end' : 'chat-start'} relative group`}
      onMouseEnter={() => setShowActions(true)}
      onMouseLeave={() => setShowActions(false)}
    >
      {/* Action buttons - positioned absolutely */}
      {showActions && (
        <div
          className={`absolute z-10 flex items-center space-x-0.5 p-1 bg-base-200 rounded-md shadow-lg
                      ${isUser ? 'left-0 top-0' : 'right-0 top-0'}`}
        >
          <button
            onClick={handleCopy}
            title="Copy message"
            className="btn btn-ghost btn-xs"
          >
            <ClipboardDocumentIcon className="h-4 w-4" />
          </button>
          {isUser && (
            <>
              <button 
                title="Edit message (coming soon)" 
                disabled 
                className="btn btn-ghost btn-xs btn-disabled"
              >
                <PencilIcon className="h-4 w-4" />
              </button>
              <button 
                title="Delete message (coming soon)" 
                disabled 
                className="btn btn-ghost btn-xs btn-disabled"
              >
                <TrashIcon className="h-4 w-4" />
              </button>
            </>
          )}
        </div>
      )}

      {/* Avatar */}
      <div className="chat-image avatar">
        <div className="w-10 rounded-full">
          <div className={`w-full h-full rounded-full flex items-center justify-center ${
            isUser ? 'bg-primary text-primary-content' : 'bg-base-300'
          }`}>
            {isUser ? (
              <UserIcon className="h-5 w-5" />
            ) : (
              <SparklesIcon className="h-5 w-5" />
            )}
          </div>
        </div>
      </div>

      {/* Message bubble */}
      <div 
        className={`chat-bubble ${isUser ? 'chat-bubble-primary' : ''} max-w-[85%]`}
        aria-label={ariaLabel}
      >
        {isUser ? (
          <p className="whitespace-pre-wrap">{message.content}</p>
        ) : (
          <div className="prose prose-sm max-w-none dark:prose-invert">
            <ReactMarkdown>{message.content}</ReactMarkdown>
          </div>
        )}

        {/* Structured Advice Display */}
        {!isUser && message.structuredAdvice && (
          <div className="mt-3 pt-3 border-t border-base-content/20">
            {message.structuredAdvice.reasoning && (
              <div className="text-sm opacity-80">
                <span className="font-semibold">Reasoning:</span>
                <p className="mt-1">{message.structuredAdvice.reasoning}</p>
              </div>
            )}
            {message.structuredAdvice.model_identifier && (
              <div className="text-xs opacity-60 mt-2">
                Generated by {message.structuredAdvice.model_identifier}
              </div>
            )}
          </div>
        )}
      </div>
    </motion.div>
  );
} 